#ifndef BEATFILES_H
#define BEATFILES_H

#include "Node.h"
#include <vector>
#include <string>

// ------------------------------------------------------------------------------
//  TriggerEvery
class TriggerEvery : public Node
{
public:
    TriggerEvery();

    void operator() ();
    virtual TriggerEvery* clone();

private:
    void    reset() {setValue("out", false); _nextRefresh=-1;}

    // Internal timekeepers, in milliseconds
    int     _nextRefresh;
};


// ------------------------------------------------------------------------------
//  Multiply
class Multiply : public Node
{
public:
    Multiply();
    void operator() ();
    virtual Multiply* clone();

private:
    void    reset() {setValue("out", false); _nextRefresh=-1;}

    // Internal timekeepers, in milliseconds
    int     _nextRefresh;
    int     _lastInputBeat;
    int     _delta;
};


// ------------------------------------------------------------------------------
//  NodeOnset

// Imports "onset" data from sonic-annotator
// Onset data is generated by the "aubio-onset" plugin,
// and is a csv file with one datum per line: the sample ID
// of the next "onset"
class NodeOnset : public Node
{
public:
    NodeOnset();
    void operator() (void);
    virtual NodeOnset* clone();

    // TODO for random access:
//     bool     checkBeat(int thisSample, int lastSample);

    void    loadFile();
    void    loadFile(QString filename);

    // May want to define a "file" param for input file.
    // Could be auto-filled to look in standard locations.
private:
    std::vector<int> _onsets;
    int _nextRefresh;
    int _nextIndex;

    int _lastSample;
};

// ------------------------------------------------------------------------------
//  NodeBar

// Imports bar data from sonic-annotator
// This s generated by the "qm barbeat tracker" plugin,
// and is a csv file with two data per line: the sample ID
// of the next beat, and its bar number.  Since the bar numbers
// start at 1 and increase by one every sample, we don't explicitly
// record them here.
class NodeBar : public Node
{
public:
    NodeBar();
    void    operator() (void);
    virtual NodeBar* clone();

    void    loadFile();
    void    loadFile(QString filename);

private:
    std::vector<int> _bars;
    int _nextRefresh;
    int _nextIndex;
};

// ------------------------------------------------------------------------------
//  NodeBarBeat

// Imports bar/beat data from sonic-annotator
// This s generated by the "qm barbeat tracker" plugin,
// and is a csv file with two data per line: the sample ID
// of the next beat, and its bar number.  Since the bar numbers
// start at 1 and increase by one every sample, we don't explicitly
// record them here.
class NodeBarBeat : public Node
{
public:
    NodeBarBeat();
    void    operator() (void);
    virtual NodeBarBeat* clone();

    void    loadFile();
    void    loadFile(QString filename);

private:
    std::vector<int> _beats;
    std::vector<int> _beatnumber;
    std::vector<int> _barnumber;
    int _nextRefresh;
    int _nextIndex;

    int _lastSample;
};

// ------------------------------------------------------------------------------
//  Segmentino

class Segmentino : public Node
{
public:
    Segmentino();
    void    operator() (void);
    virtual Segmentino* clone();

    void    loadFile();
    void    loadFile(QString filename);

private:
    std::vector<std::pair<int, int> > _segments;
    int findSegment(int msecs);
};

// Free function proto
void convertSamplesToMS(std::vector<int> &samples);

#endif // BEATFILES_H
